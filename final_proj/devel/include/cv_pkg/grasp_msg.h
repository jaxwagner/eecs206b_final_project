// Generated by gencpp from file cv_pkg/grasp_msg.msg
// DO NOT EDIT!


#ifndef CV_PKG_MESSAGE_GRASP_MSG_H
#define CV_PKG_MESSAGE_GRASP_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cv_pkg
{
template <class ContainerAllocator>
struct grasp_msg_
{
  typedef grasp_msg_<ContainerAllocator> Type;

  grasp_msg_()
    : grasp_x_cm(0.0)
    , grasp_y_cm(0.0)
    , grasp_theta(0.0)  {
    }
  grasp_msg_(const ContainerAllocator& _alloc)
    : grasp_x_cm(0.0)
    , grasp_y_cm(0.0)
    , grasp_theta(0.0)  {
  (void)_alloc;
    }



   typedef float _grasp_x_cm_type;
  _grasp_x_cm_type grasp_x_cm;

   typedef float _grasp_y_cm_type;
  _grasp_y_cm_type grasp_y_cm;

   typedef float _grasp_theta_type;
  _grasp_theta_type grasp_theta;





  typedef boost::shared_ptr< ::cv_pkg::grasp_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cv_pkg::grasp_msg_<ContainerAllocator> const> ConstPtr;

}; // struct grasp_msg_

typedef ::cv_pkg::grasp_msg_<std::allocator<void> > grasp_msg;

typedef boost::shared_ptr< ::cv_pkg::grasp_msg > grasp_msgPtr;
typedef boost::shared_ptr< ::cv_pkg::grasp_msg const> grasp_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cv_pkg::grasp_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cv_pkg::grasp_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cv_pkg::grasp_msg_<ContainerAllocator1> & lhs, const ::cv_pkg::grasp_msg_<ContainerAllocator2> & rhs)
{
  return lhs.grasp_x_cm == rhs.grasp_x_cm &&
    lhs.grasp_y_cm == rhs.grasp_y_cm &&
    lhs.grasp_theta == rhs.grasp_theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cv_pkg::grasp_msg_<ContainerAllocator1> & lhs, const ::cv_pkg::grasp_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cv_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cv_pkg::grasp_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cv_pkg::grasp_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cv_pkg::grasp_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cv_pkg::grasp_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cv_pkg::grasp_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cv_pkg::grasp_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cv_pkg::grasp_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d3c4f7d62e5e5364236dabf83a36004";
  }

  static const char* value(const ::cv_pkg::grasp_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d3c4f7d62e5e536ULL;
  static const uint64_t static_value2 = 0x4236dabf83a36004ULL;
};

template<class ContainerAllocator>
struct DataType< ::cv_pkg::grasp_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cv_pkg/grasp_msg";
  }

  static const char* value(const ::cv_pkg::grasp_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cv_pkg::grasp_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 grasp_x_cm\n"
"float32 grasp_y_cm\n"
"float32 grasp_theta\n"
"\n"
"\n"
;
  }

  static const char* value(const ::cv_pkg::grasp_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cv_pkg::grasp_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.grasp_x_cm);
      stream.next(m.grasp_y_cm);
      stream.next(m.grasp_theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct grasp_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cv_pkg::grasp_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cv_pkg::grasp_msg_<ContainerAllocator>& v)
  {
    s << indent << "grasp_x_cm: ";
    Printer<float>::stream(s, indent + "  ", v.grasp_x_cm);
    s << indent << "grasp_y_cm: ";
    Printer<float>::stream(s, indent + "  ", v.grasp_y_cm);
    s << indent << "grasp_theta: ";
    Printer<float>::stream(s, indent + "  ", v.grasp_theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CV_PKG_MESSAGE_GRASP_MSG_H
